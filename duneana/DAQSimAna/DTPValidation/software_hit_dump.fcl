BEGIN_PROLOG
hitdump:
{

  module_type:   HitDump
  HitLabel:      "swtppass"
  OutputFile:    "SoftwareHitsOut.txt"

}
END_PROLOG

#include "SWTriggerPrimitiveFinder.fcl" 
#include "standard_detsim_dune10kt_1x2x6.fcl"

process_name: TPDump

services: @local::dunefd_simulation_services
services.TimeTracker:       {}
#services.TFileService.fileName: "HitDump.root"
services.MemoryTracker:         { } # default is one
services.RandomNumberGenerator: {} #ART native random number generator
services.NuRandomService:       @local::per_event_NuRandomService  # seedservice.fcl
services.message:               @local::dune_message_services_prod

source: {
  module_type:  EmptyEvent #do not read in from a ROOT file, since we're reading in non-MC data 
  maxEvents:    10         #Max number of events to create
  firstRun:     1          #run number to use for this file 
  firstEvent:   1          #number of first event in the file 
}

physics: {
   producers: {
      convertedrds: {
         module_type: "RawDigitConverter"
	 RawInputFile: "test/fw_adcs_16211_link11_f1.csv" #df file containing the raw ADCs
      }
      
      swtppass: @local::runsoftwarehitfinder

      rns:            { module_type: "RandomNumberSaver" }
   }
   
   analyzers:
   {
      daqanaswtppass:     @local::hitdump
   }

   simulate: [ rns, convertedrds, swtppass]
   ana: [ daqanaswtppass ]

   trigger_paths: [simulate] 
   end_paths: [ ana ] 

}

#Set the thresholds for the HF 
physics.producers.swtppass.finder.Threshold: 1500
physics.producers.swtppass.InputTag: "convertedrds"
physics.producers.swtppass.PedInitialValue: 500

# Shut up the backtracker
services.message.destinations.LogStandardOut.categories.BackTracker.limit: 0
services.message.destinations.LogStandardError.categories.BackTracker.limit: 0

