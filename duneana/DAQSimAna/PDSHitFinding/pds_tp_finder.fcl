# Read in (presumably noise-free) waveforms, add noise and pedestals,
# then find trigger primitives on the (now noisy) waveforms, and save
# the trigger primitives (as "Hits") to a txt file in a format suitable
# for TriggerAlgs. 
#
# Hit finding based on the "Absolute" Running Sum algorithm approach
# where the waveforms are effectively integreated in real time and the 
# algorithm outputs induction and collection TPs
#

BEGIN_PROLOG

# This is the generic trigger primitive finder call. To make your own,
# add another call to "@local::trigprimpass1" to the producers list,
# and modify its settings later on

trigprimpass1: {
   module_type: "PDSTriggerPrimitiveFinder"
   #run through the abs module to get induction hits as well for the standard HF chain
   #module_type: "AbsRunningSumTPFinder"         
   InputTag: "simwire"
   finder:    {
     tool_type: "PDSTriggerPrimitiveFinderPass1"
   }
}
END_PROLOG

#include "standard_detsim_dune10kt_1x2x6.fcl"
# #include "pds_tp_finding_prolog.fcl"

process_name: PrimSim

services: @local::dunefd_simulation_services
services.TFileService: { fileName: "deleteme.root" }
services.TimeTracker:       {}
services.MemoryTracker:         { } # default is one
services.RandomNumberGenerator: {} #ART native random number generator
services.FileCatalogMetadata:  @local::art_file_catalog_mc
services.NuRandomService:       @local::per_event_NuRandomService  # seedservice.fcl
services.message:              @local::dune_message_services_prod

source: {
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
   producers: {

      # Just the TP finder here
      trigprim1: @local::trigprimpass1

      rns:            { module_type: "RandomNumberSaver" }
   }
   
   simulate: [ rns, trigprim1 ]

   trigger_paths: [simulate] 
   end_paths: [ ] 

}

#Set the thresholds for the HF 
physics.producers.trigprim1.finderCol.Threshold: 900
physics.producers.trigprim1.finderInd.Threshold: 900

#physics.analyzers.daqanatrigprim1.HitLabel: "trigprim1"

# =====================================================================
# You probably won't need to change anything below here

# Shut up the backtracker
services.message.destinations.LogStandardOut.categories.BackTracker.limit: 0
services.message.destinations.LogStandardError.categories.BackTracker.limit: 0

# DetSim services. These are used by SimWire to add noise and
# pedestals to the incoming (noise-free) waveforms
services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService:      @local::chnoiseold
services.PedestalAdditionService:  @local::padprovided
services.AdcDistortService:        @local::stuckbits
services.AdcSuppressService:       @local::zsnone
services.AdcCompressService:       @local::cmpreplace
services.DetPedestalService:       @local::dune_fixedpeds

# Modify the threshold for the trigger primitve finder 
physics.producers.trigprim1.finderCol.Threshold: 1300
physics.producers.trigprim1.finderInd.Threshold: 1400

# Set the HitLabel to make sure each DaqAnaSim reads hits from its
#  corresponding TriggerPrimitiveFinder
#  physics.analyzers.anatrigprim.HitLabel: "trigprim"

# Modify geometry for VDCB
services.Geometry.GDML: "dunevdcb1_refactored.gdml"
services.Geometry.Name: "dunevdcb1"
services.Geometry.ROOT: "dunevdcb1_refactored.gdml"

# Turn off Photon hit finding for VDCB
# ^ We should find what this line was

# Plane View Y Error:
services.DetectorPropertiesService.TimeOffsetY: 0

# Shut up the backtracker
services.message.destinations.LogStandardOut.categories.BackTracker.limit: 0
services.message.destinations.LogStandardError.categories.BackTracker.limit: 0
