////////////////////////////////////////////////////////////////////////
// Class:       StartEndDump
// Module Type: analyzer
// File:        StartEndDump_module.cc
//
// Generated by Charlie Batchelor using the old copy and paste...
////////////////////////////////////////////////////////////////////////

// C++ includes

// ROOT includes
#include "TH1I.h"
#include "TH1F.h"
#include "TH2F.h"
#include "TTree.h"

// Framework includes
#include "larcoreobj/SimpleTypesAndConstants/RawTypes.h"
#include "lardataobj/RawData/RawDigit.h"
#include "larcore/Geometry/Geometry.h"
#include "lardata/DetectorInfoServices/DetectorClocksService.h"
#include "lardataobj/RawData/raw.h"
#include "lardataobj/Simulation/sim.h"
#include "lardataobj/Simulation/SimChannel.h"
#include "lardataobj/RecoBase/Hit.h"

#include "larsim/MCCheater/BackTrackerService.h"
#include "larsim/MCCheater/ParticleInventoryService.h"

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art_root_io/TFileDirectory.h"
#include "art_root_io/TFileService.h"
#include "art/Framework/Services/Registry/ServiceHandle.h"
#include "canvas/Utilities/InputTag.h"
#include "canvas/Persistency/Common/FindMany.h"
#include "canvas/Persistency/Common/FindManyP.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

class StartEndDump : public art::EDAnalyzer {

public:

  explicit StartEndDump(fhicl::ParameterSet const & p);

  // Plugins should not be copied or assigned.
  StartEndDump(StartEndDump const &) = delete;
  StartEndDump(StartEndDump &&) = delete;
  StartEndDump & operator = (StartEndDump const &) = delete;
  StartEndDump & operator = (StartEndDump &&) = delete;

  // The main guts...
  void analyze(art::Event const & evt) override;

  void reconfigure(fhicl::ParameterSet const & p);

  // void beginJob() override;

private:
  std::string fGEANTLabel;

  // --- Our TTree, and its associated variables.
  TTree* fStartEndDumpTree;
  // General event info.
  int Run;
  int SubRun;
  int Event;
  // Raw digits
  //int NTotDigs; // unused

  // --- Declare our services
  art::ServiceHandle<geo::Geometry> geo;
  art::ServiceHandle<cheat::BackTrackerService> bt_serv;
  art::ServiceHandle<cheat::ParticleInventoryService> pi_serv;

};

//......................................................
StartEndDump::StartEndDump(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p)
{
  this->reconfigure(p);
}

void StartEndDump::reconfigure(fhicl::ParameterSet const & p)
{
  fGEANTLabel = p.get<std::string> ("GEANT4Label");
} // Reconfigure

//......................................................
void StartEndDump::analyze(art::Event const & evt)
{

  // --- We want to reset all of our TTree variables...
  // ResetVariables();

  // --- Set all of my general event information...
  Run    = evt.run();
  SubRun = evt.subRun();
  Event  = evt.event();

  // Get truth info of all generated particles here
  auto truthInfo = evt.getValidHandle<std::vector<simb::MCTruth> >("generator"); 
  std::vector<simb::MCParticle> allParticles;

  // Get the signal particle(s)
  for (int i = 0 ; i < truthInfo->at(0).NParticles() ; i++ ){
     simb::MCParticle particle = truthInfo->at(0).GetParticle(i);
     allParticles.push_back(particle);
     std::cout << "Found particle, PDG: " << particle.PdgCode() << std::endl;  
     std::cout << "PARTICLE END POSITION: (x, y, z) - " << particle.EndX() << " " << particle.EndY() << " "<< particle.EndZ() << std::endl;
  }

  std::cout << "TRUTH INFO FOR THIS PARTICLE: " << truthInfo->at(0) << std::endl; 

  //art::FindMany<simb::MCTruth> assn(allParticles,evt,fGEANTLabel);
  //std::map<int, const simb::MCTruth*> idToTruth;
  //double totalEnergy = 0;

  // Loop over all the found particles from GEANT
  //for(size_t i=0; i<allParticles->size(); ++i){
  //   std::cout << " PARTICLE " << i << " Mother: " << allParticles->at(i).Mother() << " and PDG is: "  << allParticles->at(i).PdgCode() << 
  //    " where the track ID is: " << allParticles->at(i).TrackId() << " and the momentum is: " << allParticles->at(i).P()  << std::endl;
  
  //  if (allParticles->at(i).Mother() == 0 && allParticles->at(i).PdgCode() == 11){
   //   totalEnergy += allParticles->at(i).P();
   // }	
 //}
 // std::cout << "Have summed the total momentum coming from all the 'separate' electrons as: " << totalEnergy << std::endl;

} // Analyze
DEFINE_ART_MODULE(StartEndDump) 
