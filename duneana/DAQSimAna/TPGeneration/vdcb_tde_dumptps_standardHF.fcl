#include "DAQTPFinderDump.fcl"
#include "StandardHF.fcl"
BEGIN_PROLOG
trigprim_ana: {
   @table::standard_daqtpfinderdump
   OutputFile:  "standardHF_vdcb_collection_tps.txt"
   OutputFile1: "standardHF_vdcb_induction_tps.txt"
   VDCBgeo:     true
}
END_PROLOG
#include "standard_detsim_dune10kt_1x2x6.fcl"


process_name: PrimSim

services: @local::dunefd_simulation_services
services.TFileService: { fileName: "delete_me.root" }
services.TimeTracker:       {}
services.MemoryTracker:         { } # default is one
services.RandomNumberGenerator: {} #ART native random number generator
services.NuRandomService:       @local::per_event_NuRandomService  # seedservice.fcl
services.message:              @local::dune_message_services_prod
services.Geometry: @local::dune10kt_1x2x6_geo

source: {
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
   producers: {
      simwire: {
         module_type: "SimWireDUNE"
         SimChannelLabel: "largeant"
         NoiseOn: true
         PedestalOn: true
         DistortOn: false
         SuppressOn: false
         KeepEmptyChannels: true
         AdcSimulator:      "adcsim_ideal"
         UseRawDigitInput: true
         RawDigitInputLabel: "daq"
      }

      # Our HF chain for trigger primitive generation
      #use standardtrifprimpass1 for standard HF in all three planes with VDCB setup

      trigprim: @local::standardtrigprimpass1
     
      rns:            { module_type: "RandomNumberSaver" }
   }
   
   analyzers: {
      # Create an SNAna for each trigger primitive finders. Make
      # sure to add each one to the "ana" list below

      anatrigprim: @local::trigprim_ana
     
   }

   simulate: [rns, simwire, trigprim]

   ana     : [anatrigprim]
   
   trigger_paths: [ simulate ] 
   end_paths: [ ana ] 

}

# Modify the threshold for the trigger primitve finder 
physics.producers.trigprim.finderCol.Threshold: 1300
physics.producers.trigprim.finderInd.Threshold: 1400


# Set the HitLabel to make sure each DaqAnaSim reads hits from its
#  corresponding TriggerPrimitiveFinder
physics.analyzers.anatrigprim.HitLabel: "trigprim"
physics.analyzers.anatrigprim.RawDigitLabel: "tpcrawdecoder:daq"


# Modify geometry for VDCB
services.Geometry.GDML: "dunevdcb1_refactored.gdml"
services.Geometry.Name: "dunevdcb1"
services.Geometry.ROOT: "dunevdcb1_refactored.gdml"

# Turn off Photon hit finding for VDCB

# Plane View Y Error:
services.DetectorPropertiesService.TimeOffsetY: 0

# Services things
services.BackTrackerService.BackTracker.SimChannelModuleLabel: "tpcrawdecoder:simpleSC"

# physics things
physics.producers.simwire.SimChannelLabel: "elecDrift"
physics.producers.simwire.RawDigitInputLabel: "tpcrawdecoder:daq"

# =====================================================================
# You probably won't need to change anything below here

# Shut up the backtracker
services.message.destinations.LogStandardOut.categories.BackTracker.limit: 0
services.message.destinations.LogStandardError.categories.BackTracker.limit: 0

# If you want to have the mf::LogDebug() messages, uncomment the following:
# services.message.destinations.LogStandardOut.threshold:"DEBUG"
# services.message.destinations.LogStandardOut.categories.SNAna_module.limit:-1
# services.message.destinations.LogStandardOut.categories.default.limit:0


# DetSim services. These are used by SimWire to add noise and
# pedestals to the incoming (noise-free) waveforms
services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService:      @local::chnoiseold
services.PedestalAdditionService:  @local::padprovided
services.AdcDistortService:        @local::stuckbits
services.AdcSuppressService:       @local::zsnone
services.AdcCompressService:       @local::cmpreplace
services.DetPedestalService:       @local::dune_fixedpeds
