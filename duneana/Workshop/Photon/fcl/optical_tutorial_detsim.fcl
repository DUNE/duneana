#
# File:    optical_tutorial_detsim.fcl
# Purpose: Simulates readout response to induced and collected charge
#
# This configuration runs the detector simulation
#
# Input:
# - output of largeant modules
#
#



#
# services

#include "services_dune.fcl"

# modules
#include "detsimmodules_dune.fcl"
#include "opticaldetectormodules_dune.fcl"

#include "tools_dune.fcl"
#
# modules
#



process_name: DetSim

services:
{
  TFileService: { fileName: "%ifb_%p_hist.root" }
  RandomNumberGenerator: {} #ART native random number generator
  @table::dunefd_1x2x6_simulation_services
  FileCatalogMetadata:  @local::art_file_catalog_mc
}


source:
{
  module_type:     RootInput
}


# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  producers:
  {
    rns:       { module_type: "RandomNumberSaver" }
    opdigi:         @local::dune35t_opdigi
    daq:            @local::dune_detsim
  }

  analyzers:
  {
    wvfana: @local::dunefd_averagewaveform
  }

  #define the producer and filter modules for this path, order matters,
  simulate:  [ rns, opdigi, daq]

  #define the output stream, there could be more than one if using filters
  stream1:   [ out1, wvfana ]

  #ie analyzers and output streams.  these all run simultaneously
  end_paths: [stream1]
}

# block to define where the output goes.  if you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
# entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName: "%ifb_%p.root"
    dataTier: "simulated"
    compressionLevel: 1
  }
}

# Use fixed values instead of DB for pedestals.
services.DetPedestalService: @local::dune_fixedpeds

# DetSim flags.
physics.producers.daq.NoiseOn:     true
physics.producers.daq.PedestalOn:  true
physics.producers.daq.DistortOn:   false
physics.producers.daq.SuppressOn:  true

# DetSim services.
services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService:      @local::chnoiseold
services.PedestalAdditionService:  @local::padprovided
services.AdcDistortService:        @local::stuckbits
services.AdcSuppressService:       @local::zslegacy
services.AdcCompressService:       @local::cmpblock

# Disable bad channels.
#services.IChannelStatusService.BadChannels: [ ]


