## analyzer
#include "OpDetAnalyzer.fcl" 

## services
#include "services_dune.fcl"
#include "singles_dune.fcl"
##include "messages_sbnd.fcl"

# modules
#include "largeantmodules_dune.fcl"
#include "photpropservices_dune.fcl"







process_name: G4

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "sim_electrons_%p_hist.root" }
  TimeTracker:       {}
  MemoryTracker:         {} # default is one
  RandomNumberGenerator: {} #ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
  @table::dunefd_1x2x6_simulation_services
}





source:
{
  module_type:     EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:      10          # Number of events to create
  firstRun:        1          # Run number to use for this file
  firstEvent:      1          # number of first event in the file
}


physics:
{

  producers:
  {
    rns: { module_type: "RandomNumberSaver" }

    # Generation
    generator: @local::microboone_singlep

    # The geant4 step
    largeant: @local::dunefd_largeant

      

  }

  analyzers:
  {
    # Analyzer to count number of photons arriving on photo-detectors
     opanalyzer: @local::OpDetAnalyzer
  }


  # All producers and filters modules for this path, order matters
  simulate: [ rns
            , generator
            , largeant
          ]

  # Analyzers
  analyze: [opanalyzer ]

  # The output stream, there could be more than one if using filters
  stream1: [ out1 ]

  # Contains the paths that modify the art::event
  trigger_paths: [ simulate ]

  # Contains the paths that do not modify the art::Event
  end_paths: [ stream1, analyze ]
}


outputs:
{
  out1:
  {
   module_type: RootOutput
    fileName: "sim_electrons_%p.root" #default file name, can override from command line with -o or --output
    dataTier: "simulated"  
  }
}



# generator parameters
physics.producers.generator.PadOutVectors: true
physics.producers.generator.PDG: [11]
physics.producers.generator.P0: [0.05] # GeV
physics.producers.generator.SigmaP: [0]
physics.producers.generator.PDist: 0
physics.producers.generator.X0: [100]
physics.producers.generator.Y0: [0]
physics.producers.generator.SigmaY: [400]
physics.producers.generator.Z0: [600]
physics.producers.generator.SigmaZ: [500]
physics.producers.generator.T0: [0]
physics.producers.generator.Theta0XZ: [0]
physics.producers.generator.Theta0YZ: [0]
physics.producers.generator.SigmaThetaXZ: [0]
physics.producers.generator.SigmaThetaYZ: [0]
